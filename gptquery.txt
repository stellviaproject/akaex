lo que tengo es person_structures = structure.personstructure_set.all(), pero hay person que son student, por lo que hay una tabla con el nombre student que establece una relaci√≥n many to many entre person y student, entonces yo necesito obtener los person que son student en la forma de los datos de la tabla student para luego serializarlo en json, los modelos son los siguientes:
class Student(BaseAkModel):
    """ It represent a person who is a student"""
    name = models.CharField(max_length=100, null=True, blank=True, editable=False, verbose_name=_('name'))
    no_expedient = models.CharField(max_length=50, verbose_name=_('no. expedient'), db_column='no_expediente')
    structure = models.ForeignKey(Structure, on_delete=models.CASCADE, verbose_name=_('structure'), db_column='estructura')
    person = models.ForeignKey(Person, on_delete=models.CASCADE, verbose_name=_('person'), db_column='persona')
    status = models.ForeignKey(StudentStatusType, on_delete=models.SET_NULL, null=True, verbose_name=_('status'), db_column='estado')
    tutor = models.ForeignKey(Tutor, on_delete=models.SET_NULL, null=True, db_column='tutor')
    productive_activity = models.ForeignKey(ProductiveActivityType, on_delete=models.SET_NULL, null=True, blank=True, verbose_name=_('productive activity'), db_column='actividad_productiva')

    # This field is not in the document, but the student can have an academic level
    # scholar_level = models.CharField(max_length=100, null=True, blank=True)

    groups = models.ManyToManyField(TeachingGroup, through='StudentGroup', related_name='students',
                                    through_fields=('student', 'group'), verbose_name=_('groups'), db_column='grupos')

    tutors = models.ManyToManyField(Tutor, through='StudentTutor', related_name='students',
                                    through_fields=('student', 'tutor'), verbose_name=_('tutors'), db_column='tutores')

class PersonStructure(BaseAkModel):
    """ It relates the person with an structure """
    name = models.CharField(max_length=100, null=True, blank=True, editable=False, verbose_name=_('name'))
    person = models.ForeignKey(Person, on_delete=models.CASCADE, verbose_name=_('person'), db_column='persona')
    category = models.ForeignKey(PersonCategoryType, on_delete=models.CASCADE, default=None, verbose_name=_('category'), db_column='categoria')
    structure = models.ForeignKey(Structure, on_delete=models.CASCADE, verbose_name=_('structure'), db_column='estructura')
    category_order= models.IntegerField(default=0, verbose_name=_('category_order'), db_column='orden_categoria')

class Person(BaseAkModel):
    """" It relates all the people who interact (with roles) or whose information is managed."""
    # NOMINAL INFORMATION
    second_name = models.CharField(max_length=100, null=True, blank=True, verbose_name=_('second name'), db_column='segundo_nombre')
    first_last_name = models.CharField(max_length=100, verbose_name=_('first last name'), db_column='primer_apellido')
    second_last_name = models.CharField(max_length=100, verbose_name=_('second last name'), db_column='segundo_apellido')
    ci = models.CharField(max_length=11,
                          validators=[RegexValidator(r"^\d{11}$", message=_("The CI must have 11 characters.")), 
                            RegexValidator(r"[0-9]{2}((0[1-9]|11|12)|(1[0-9])|(2[0-9])|(3[0-1]))[0-9]{5}", message=_("The CI is not valid."))], db_column='carne') #Represents the person's identity card number.
    ci_serie = models.CharField(max_length=50, null=True, blank=True, db_column='no_serie_ci') #Represents the person's identity card number serie.
    date_of_birth = models.DateField(null=True, blank=True, verbose_name=_('date of birth'), db_column='fecha_nacimiento')
    photo = models.ImageField(upload_to=person_photo_storage_path, default=None, null=True, blank=True, verbose_name=_('photo'), db_column='foto')

    # CONTACT DATA
    address = models.TextField(default='', null=True, blank=True, verbose_name=_('address'), db_column='direccion')
    address_province = models.ForeignKey(Province, on_delete=models.CASCADE, null=True, blank=True, verbose_name=_('address province'), db_column='direccion_provincia')
    address_municipality = models.ForeignKey(Municipality, on_delete=models.CASCADE, null=True, blank=True, verbose_name=_('address municipality'), db_column='direccion_municipio')
    address_popular_council = models.ForeignKey(PopularCouncilType, on_delete=models.CASCADE, blank=True, null=True, verbose_name=_('address popular_council'), db_column='direccion_consejo_popular')
    address_location = models.ForeignKey(LocationType, on_delete=models.CASCADE, null=True, blank=True, verbose_name=_('address location'), db_column='direccion_localidad')
    email = models.EmailField(default='', null=True, blank=True, verbose_name=_('email'), db_column='correo_electronico')
    mobile_phone = models.CharField(
        max_length=16,
        blank=True,
        null=True,
        validators=[
            RegexValidator(
                regex=r'^\+?1?\d{8,15}$',
                message="Phone number must be entered in the format '+123456789'. Up to 15 digits allowed."
            )], verbose_name=_('mobile phone'), db_column='telefono_movil'
    )
    phone = models.CharField(
        max_length=16,
        blank=True,
        null=True,
        validators=[
            RegexValidator(
                regex=r'^\+?1?\d{8,15}$',
                message=_("Phone number must be entered in the format '123456789'")
            )],verbose_name=_('phone'), db_column='telefono'
    )

    # PHENOTYPIC FEATURES
    gender = models.ForeignKey(GenderType, on_delete=models.CASCADE, null=True, blank=True, verbose_name=_('gender'), db_column='genero')
    race = models.ForeignKey(RaceType, on_delete=models.CASCADE, null=True, blank=True, verbose_name=_('race'), db_column='raza')
    height = models.IntegerField(null=True, blank=True, default=None, db_column='estatura', verbose_name='height')
    weight = models.IntegerField(null=True, blank=True, default=None, db_column='peso', verbose_name='weight')
    
    # SUPERATION DATA
    scholar_level = models.ForeignKey(ScholarLevelType, on_delete=models.CASCADE, blank=True, null=True, verbose_name=_('scholar level'), db_column='nivel_escolar')
    teaching_category = models.ForeignKey(TeachingCategoryType, on_delete=models.CASCADE, blank=True, null=True, verbose_name=_('teaching category'), db_column='nivel_ensennanza')
    profession = models.ForeignKey(ProfessionType, on_delete=models.CASCADE, blank=True, null=True, verbose_name=_('profession'), db_column='profesion')
    academic_grade = models.ForeignKey(AcademicGradeType, on_delete=models.CASCADE, blank=True, null=True, verbose_name=_('academic grade'), db_column='anno_academico')
    investigative_category = models.ForeignKey(InvestigativeCategoryType, on_delete=models.CASCADE, blank=True, null=True, verbose_name=_('investigative category'), db_column='categoria_investigativa')

    extra_field = models.JSONField(blank=True, null=True, verbose_name=_('extra field'), db_column='archivo_extra')

    # RELATIONS
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True, verbose_name=_('user'), db_column='usuario')
    structures = models.ManyToManyField(Structure, through='PersonStructure', related_name='structures', verbose_name=_('structures'), db_column='estructuras')
    educational_workers = models.ManyToManyField(Structure, through='EducationalWorker',
                                                 related_name='educational_workers', verbose_name=_('educational workers'), db_column='trabajadores_docentes')
    not_educational_workers = models.ManyToManyField(Structure, through='NotEducationalWorker',
                                                     through_fields=('person', 'structure'),
                                                     related_name='not_educational_workers', verbose_name=_('not educational workers'), db_column='trabajadores_no_docentes')
    students = models.ManyToManyField(Structure, through='Student', related_name='students', verbose_name=_('students'), db_column='estudiantes')

    objects = PersonManager()